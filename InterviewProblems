1.******************************************************
class Interview1{
	public static void main(String[] args){

		boolean x = true;
		boolean y = false;
		short z = 42;

		//if(y == true);
		if((z++ == 42) && (y = true)) z++;
		if((x = false) || (++z == 45)) z++;

		System.out.println("z=" + z);
	}
}

Ans:
z = 46

2.*********************************************************
2 * 8 最高效的实现方式：

Ans:
2<<3 or 8<<2


3.*********************************************************
交换两个数的方法 num1  num2
①：引入第三个变量  num3
②：num1 += num2;
   num2 = num1 - num2;
   num1 -= num2;
③：num1 = num1 ^ num2;
   num2 = num1 ^ num2;
   num1 = num1 ^ num2;
 since m = (m ^ n) ^ n
 
 4.********************************************************
 创建一个长度为6的int型数组，要求数组元素的值都在1-30之间，且是随机赋值。同时，要求元素的值各不相同。
 
 class ArrayExer {
	public static void main(String[] args) {
		//方式一：
//		int[] arr = new int[6];
//		for (int i = 0; i < arr.length; i++) {// [0,1) [0,30) [1,31)
//			arr[i] = (int) (Math.random() * 30) + 1;
//
//			boolean flag = false;
//			while (true) {
//				for (int j = 0; j < i; j++) {
//					if (arr[i] == arr[j]) {
//						flag = true;
//						break;
//					}
//				}
//				if (flag) {
//					arr[i] = (int) (Math.random() * 30) + 1;
//					flag = false;
//					continue;
//				}
//				break;
//			}
//		}
//
//		for (int i = 0; i < arr.length; i++) {
//			System.out.println(arr[i]);
//		}
		//方式二：
		int[] arr = new int[6];
		for (int i = 0; i < arr.length; i++) {// [0,1) [0,30) [1,31)
			arr[i] = (int) (Math.random() * 30) + 1;
			
				for (int j = 0; j < i; j++) {
					if (arr[i] == arr[j]) {
						i--;
						break;
					}
				}
			}

		for (int i = 0; i < arr.length; i++) {
			System.out.println(arr[i]);
		}
	}
}

5.*********************************************************************
“回形数”实现：如若在控制台输入3，则输出
1 2 3 
8 9 4
7 6 5
方式一：
class RectangleTest {
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		System.out.println("输入一个数字");
		int len = scanner.nextInt();
		int[][] arr = new int[len][len];

		int s = len * len;
		/*
		 * k = 1:向右 k = 2:向下 k = 3:向左 k = 4:向上
		 */
		int k = 1;
		int i = 0, j = 0;
		for (int m = 1; m <= s; m++) {
			if (k == 1) {
				if (j < len && arr[i][j] == 0) {
					arr[i][j++] = m;
				} else {
					k = 2;
					i++;
					j--;
					m--;
				}
			} else if (k == 2) {
				if (i < len && arr[i][j] == 0) {
					arr[i++][j] = m;
				} else {
					k = 3;
					i--;
					j--;
					m--;
				}
			} else if (k == 3) {
				if (j >= 0 && arr[i][j] == 0) {
					arr[i][j--] = m;
				} else {
					k = 4;
					i--;
					j++;
					m--;
				}
			} else if (k == 4) {
				if (i >= 0 && arr[i][j] == 0) {
					arr[i--][j] = m;
				} else {
					k = 1;
					i++;
					j++;
					m--;
				}
			}
		}

		// 遍历
		for (int m = 0; m < arr.length; m++) {
			for (int n = 0; n < arr[m].length; n++) {
				System.out.print(arr[m][n] + "\t");
			}
			System.out.println();
		}
	}
}

方法二：
class RectangleTest1 {

	public static void main(String[] args) {
		int n = 7;
		int[][] arr = new int[n][n];

		int count = 0; // 要显示的数据
		int maxX = n - 1; // x轴的最大下标
		int maxY = n - 1; // Y轴的最大下标
		int minX = 0; // x轴的最小下标
		int minY = 0; // Y轴的最小下标
		while (minX <= maxX) {
			for (int x = minX; x <= maxX; x++) {
				arr[minY][x] = ++count;
			}
			minY++;
			for (int y = minY; y <= maxY; y++) {
				arr[y][maxX] = ++count;
			}
			maxX--;
			for (int x = maxX; x >= minX; x--) {
				arr[maxY][x] = ++count;
			}
			maxY--;
			for (int y = maxY; y >= minY; y--) {
				arr[y][minX] = ++count;
			}
			minX++;
		}

		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr.length; j++) {
				String space = (arr[i][j] + "").length() == 1 ? "0" : "";
				System.out.print(space + arr[i][j] + " ");
			}
			System.out.println();
		}
	}
}
   
6.*******************************************************************
快速排序的排序思想(代码不是必须掌握的）
冒泡排序要会手写


/**
 * 快速排序
 * 通过一趟排序将待排序记录分割成独立的两部分，其中一部分记录的关键字均比另一部分关键字小，
 * 再分别对这两部分继续进行排序，直到整个序列有序。
 * @author shkstart
 * 2018-12-17
 */
public class QuickSort {
	private static void swap(int[] data, int i, int j) {
		int temp = data[i];
		data[i] = data[j];
		data[j] = temp;
	}

	private static void subSort(int[] data, int start, int end) {
		if (start < end) {
			int base = data[start];
			int low = start;
			int high = end + 1;
			while (true) {
				while (low < end && data[++low] - base <= 0)
					;
				while (high > start && data[--high] - base >= 0)
					;
				if (low < high) {
					swap(data, low, high);
				} else {
					break;
				}
			}
			swap(data, start, high);
			
			subSort(data, start, high - 1);//递归调用
			subSort(data, high + 1, end);
		}
	}
	public static void quickSort(int[] data){
		subSort(data,0,data.length-1);
	}
	
	
	public static void main(String[] args) {
		int[] data = { 9, -16, 30, 23, -30, -49, 25, 21, 30 };
		System.out.println("排序之前：\n" + java.util.Arrays.toString(data));
		quickSort(data);
		System.out.println("排序之后：\n" + java.util.Arrays.toString(data));
	}
}
//冒泡排序
import java.util.Arrays;

public class BubbleSort {
	public static void main(String[] args) {
		//进行从小到大排序
		int[] arr = new int[] {45, 25, 61, 2, 58, 99, 45, 3, 45};
		for(int i = 0;i < arr.length - 1;i++ ) {
			//对n个数排序，则需要进行n-1趟
			for(int j = 0;j < arr.length - 1 -i;j++) {
				//每一趟比上一趟少比较一次
				if(arr[j] > arr[j + 1]) {
					int temp;
					temp =arr[j];
					arr[j] = arr[j + 1];
					arr[j + 1] = temp;
				}
			}
		}
		System.out.println(Arrays.toString(arr));
		
	}
}
7.********************************************************************************
堆排序 和  归并排序  的思路

8.*************************************************************************
public class Prob1 {
	public static void main(String[] args) {
		int a = 10;
		int b = 10;
		method(a,b);
		/*
		 * 题目：编写method方法，使得调用method后，仅打印出
		 * a = 100, b = 200
		 */
		System.out.println("a=" + a);
		System.out.println("b=" + b);
	}
	//答案：
	//方法一：
	
	public static void method(int a, int b) {
		a = 100;
		b = 200;
		System.out.println("a=" + a);
		System.out.println("b=" + b);
		System.exit(0);//强行退出程序
	}
	
	//方法二：目前还没学，code还有问题
	//重写 打印流
	
//workspace0522>>InterviewProb>>Prob1

9.***************************************************
 * @Description:定义一个int型的数组：
 * int[] arr = new int[]{12,3,3,34,56,77,432};
 * 让数组的每个位置上的值去除以首位置的元素，得到的结果，作为该位置上的新值。遍历新的数组。
 
 Ans:
 public class Prob2 {
	public static void main(String[] args) {
		int[] arr = new int[] {12,3,3,34,56,77,432};
		//wrong answer
//		for(int i = 0;i < arr.length;i++) {
//			arr[i] = arr[i] / arr[0];
//		}
		//首先改变了首位置的值，之后的计算就都是除以1
		
		//right answer 1(best)
		for(int i = arr.length - 1;i >= 0;i--) {
			arr[i] = arr[i] / arr[0];
		}
		
		//right answer 2
//		int temp = arr[0];
//		for(int i = 0;i < arr.length; i++) {
//			arr[i] = arr[i] / temp;
//		}
		
		System.out.println(Arrays.toString(arr));
	}
}

//workspace0522>>InterviewProb>>Prob2

10.*******************************************************************
区分方法的重载和重写

11.******************************************************************
多态性是编译性行为还是运行时行为

Ans:
运行时行为
说明可见 尚硅谷基础课Day12>>InterviewTest.java

12.******************************************************************
d:\JAVA_STUDY\interview

13.******************************************************************
final  finally   finalize 三个词的区别
 
 ans:
 前两者是关键字
 finalize是一个方法，在垃圾回收机制开始前调用
 
 14.****************************************************************
  == 和 equals 的区别
 
 ans:
 尚硅谷课件--面向对象（中）-->p.65

15.*****************************************************************
常见的异常有哪些，举例说明
ans:
见e:\JavaCode\Workspace0522\InterviewProb\ExceptionTest

16.**************************************************************
创建线程有几种方法？
ANS:
4种：1.继承Thread
    2.实现Runnable
    3.实现Callable（比实现Runnable更强大）（jdk5.0添加）
    4.线程池（提高响应速度，降低资源消耗，便于线程管理）（jdk5.0添加）
    

17.**************************************************************
实现线程安全有几种方法？
ANS:
3种：1.同步代码块（synchronized）
    2.同步方法（synchronized）
    3.lock(jdk5.0新添)

18.**************************************************************
写一个线程安全的单例模式
ANS:
饿汉式（本身就是线程安全的）
/懒汉式（注意线程安全问题）

19.************************************************************
sleep 和wait 的异同
ANS:见google drive>java>chap8
